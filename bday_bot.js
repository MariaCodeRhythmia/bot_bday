import TelegramBot from 'node-telegram-bot-api';
import path from 'path';
import schedule from 'node-schedule';
import fs from "fs";
// –§–∞–π–ª, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
const userDataFile = 'user_data.txt';
const chatId = '-1002073695602'; // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞, –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
//const chatId = '833442414'; // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const botId = '6532102318';
const token = '6532102318:AAFzimGElCeURo0jbFf90wvc0kpNE2qiRdM';
const bot = new TelegramBot(token, { polling: true });
const BIRTHDAYS_FILE = './birthdays.txt';
let tmp = 0;

bot.onText(/\/info/,testCheck);

bot.on('new_chat_members', handleNewChatMembers);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–π —á–∞—Å
const job = schedule.scheduleJob({ hour: 8, minute: 30}, () => {
  checkBirthdays();
});
// –ü—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  console.log(bot.getChat(chatId));
});
//–º—è—É–∫–∞–ª–∫–∞
bot.onText(/\/–∫–∏—Å-–∫–∏—Å/, (msg) => {
  bot.sendMessage(chatId, "–ú—è—É –ú—è—É –ú—è—É");
});

//–º—è—É–∫–∞–ª–∫–∞
bot.onText(/\/–≥–∞–≤-–≥–∞–≤/, (msg) => {
  bot.sendMessage(chatId, "–ü–æ–≥–∞–≤–∫–∞–π –º–Ω–µ —Ç—É—Ç, —à—É—Ç–Ω–∏–∫ ü§°");
});

 function handleNewChatMembers(msg) {
  const chatId = msg.chat.id;
  const newMembers = msg.new_chat_members;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –≤ —Å–ø–∏—Å–∫–µ
  if (newMembers.length > 0) {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ
    const addedUserId = newMembers[0].id;
    let counter = 0;
    console.log(addedUserId, botId);

    if (addedUserId == botId) exit;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è   
    function requestBirthday() {
      bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ù–ü–ö-2. –ß—Ç–æ–±—ã —è –º–æ–≥ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å –≤–∞—Å –≤ –≤–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º`);

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const replyHandler = (response) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∏ –∑–∞–ø—Ä–æ—Å–∏–ª –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è
        if (response.from.id === addedUserId) {
          const userId = addedUserId;
          const userFirstName = newMembers[0].first_name;
          const userLastName = newMembers[0].last_name || '';
          const userUsername = newMembers[0].username || '';
          const userBirthday = response.text;

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
          const dateRegex = /^\d{2}\.\d{2}$/;
          if (dateRegex.test(userBirthday)) {
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ –≤ —Ñ–∞–π–ª
            fs.appendFile(
              userDataFile,
              `${userId}: ${userFirstName} ${userLastName} (@${userUsername}) - –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: ${userBirthday}\n`,
              (err) => {
                if (err) {
                  console.error('Error writing to file:', err);
                } else {
                  console.log('Data written to file:', userDataFile);
                  bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ, ${userFirstName}! –í–∞—à –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫.`);
                }
              }
            );

            // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
            bot.removeListener('text', replyHandler);
          } else {
            // –ü–æ–≤—Ç–æ—Ä–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
            bot.sendMessage(chatId, '–û–π-–æ–π-–æ–π, –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º');

            if (counter < 3) {
              counter++;
            } else {
              // –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
              bot.removeListener('text', replyHandler);
            }

          }
        }
      };

      // –°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      bot.on('text', replyHandler);
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
    requestBirthday();
  }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
function loadBirthdays() {
  const birthdays = fs.readFileSync(BIRTHDAYS_FILE, 'utf-8').split('\n').map(line => line.trim());
  return birthdays.filter(Boolean);
}
async function sendBirthdayGreeting(chatId, userId, lastName, firstName, middleName) {
  if (!userId || !lastName || !firstName || !middleName) {
    console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.');
    console.log(chatId, userId, lastName, firstName, middleName);
    return;
  }
  const telegramLink = `tg://user?id=${userId || ''}`;
  const message = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –¥–Ω–µ–º —Ä–æ–∂–¥–µ–Ω–∏—è [${lastName} ${firstName} ${middleName}](${telegramLink}) ! üéâ`;
  console.log(message);
  try {
    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error(`Failed to send greeting for ${firstName} ${lastName}: ${error}`);
    throw error;
  }
}
async function testSend(chatId, userId, lastName, firstName, middleName, date) {
  if (!userId || !lastName || !firstName || !middleName) {
    console.error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è.');
    console.log(chatId, userId, lastName, firstName, middleName);
    return;
  }
  const telegramLink = `tg://user?id=${userId || ''}`;
  let  message = '';
  if (userId !== '0') {
     tmp++;
     message = `${tmp} —Å—Å—ã–ª–∫–∞ –Ω–∞ [${lastName} ${firstName} ${middleName}](${telegramLink}) ${date} üéâ`;
     console.log(message);

} else {
     message = `–Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ [${lastName} ${firstName} ${middleName}] ${date} üéâ`;
     console.log(message);
}
  
  try {
    await bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
  } catch (error) {
    console.error(`Failed to send greeting for ${firstName} ${lastName}: ${error}`);
    throw error;
  }
}
async function testCheck() {
  const today = new Date().toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit' });
  const birthdays = loadBirthdays();
  tmp = 0;
  for (const birthdayInfo of birthdays) {
    const [date, userId, lastName, firstName, middleName] = birthdayInfo.split(/\s+/).map(part => part.trim());

    if (date) {
      try {
        await testSend(chatId, userId, lastName, firstName, middleName, date);
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 4000));
      } catch (error) {
        if (error.message.includes('ETELEGRAM: 429')) {
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤, –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
          const retryAfter = parseInt(error.response.headers['retry-after'] || '10', 10); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–µ–∫—É–Ω–¥
          console.warn(`Rate limit exceeded. Retrying after ${retryAfter} seconds...`);
          await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
          continue;
        }
        console.error(`Failed to send greeting for  ${lastName} ${firstName} ${middleName}: ${error}`);
      }
    } 
  }
}
 async function checkBirthdays() {
  const today = new Date().toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit' });
  const birthdays = loadBirthdays();

  for (const birthdayInfo of birthdays) {
    const [date, userId, lastName, firstName, middleName] = birthdayInfo.split(/\s+/).map(part => part.trim());

    if (date === today) {
      try {
        await sendBirthdayGreeting(chatId, userId, lastName, firstName, middleName);
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è
        await new Promise(resolve => setTimeout(resolve, 2000));
      } catch (error) {
        if (error.message.includes('ETELEGRAM: 429')) {
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤, –¥–µ–ª–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
          const retryAfter = parseInt(error.response.headers['retry-after'] || '10', 10); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Å–µ–∫—É–Ω–¥
          console.warn(`Rate limit exceeded. Retrying after ${retryAfter} seconds...`);
          await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
          // –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
          continue;
        }
        console.error(`Failed to send greeting for ${firstName} ${lastName}: ${error}`);
      }
    }
  }
}

